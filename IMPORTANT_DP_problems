1D DP


1.FIBONACCI USING MEMO

#include<bits/stdc++.h>
using namespace std;
#define modulo 1000000007
#define max 1001

int dp[max];

int print(int n)
{
 if(dp[n]==-1)
  {
   if(n<=1)
   dp[n]=n;
   else
   dp[n]=print(n-1)+print(n-2);
  }
  return dp[n]%modulo;
}

int main()
{
 int  T;
 cin>>T;
 while(T--)
 {
  int N;
  cin>>N;
  for(int i=0;i<max;i++)
    dp[i]=-1;
  cout<<print(N)<<endl;
 }
}

TC:O(n)
SC: O(n)

2.2 STAIRS PROBLEM
3.3 STAIRS PROBLEM

int climbStairs(int n) {
    long int dp[n+1];
        dp[0]=1;
        dp[1]=1;
        for(int i=2;i<n+1;i++)
            dp[i]=dp[i-1]+dp[i-2];
        return dp[n];
    }
    
 TC:O(n)
 SC:O(n)
 

4.HOUSE THIEVES / HOUSE ROBBER

int rob(vector<int>& nums) {
      int n = nums.size();
        if(n==0)
            return 0;
      int value1=nums[0];
      if(n==1)
          return value1;
      int value2=max(nums[0],nums[1]);
       if(n==2)
            return value2;
       int max_val;
       for(int i=2;i<n;i++)
       {
         max_val=max(value1+nums[i],value2);
         value1=value2;
         value2=max_val;
       }
        return max_val;
    }
    
TC: O(n)
SC: O(1)

5.COIN CHANGE - 1

6.COIN CHANGE - 2




2D DP
7.UNIQUE PATHS

#include<bits/stdc++.h>
using namespace std;
int uniquePaths(int m,int n)
{
 int dp[n]={0};
 dp[0]=1;
 for(int i=0;i<m;i++)
 {
  for(int j=1;j<n;j++)
    dp[j]=dp[j]+dp[j-1];
 }
 return dp[n-1];
}
int main()
{
 int m,n;
 cin>>m>>n;
 cout<<uniquePaths(m,n);
}
TC: O(mn)
SC: O(n)



8.MIN PATH SUM



 int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<int>> dp(m,vector<int>(n));
        dp[0][0]=grid[0][0];
        
        for(int i=1;i<m;i++)
            dp[i][0]=dp[i-1][0]+grid[i][0];
        for(int i=1;i<n;i++)
            dp[0][i]=dp[0][i-1]+grid[0][i];
        
        for(int i=1;i<m;i++)
            for(int j=1;j<n;j++)
            {
              dp[i][j]=min(dp[i-1][j],dp[i][j-1])+grid[i][j];
              
        
            }
        return dp[m-1][n-1];
            
    }
TC: O(n)
SC: O(n)

9.LCS



10.LIS



11.EDIT DISTANCE
int minDistance(string word1, string word2) {
        int m=word1.length();
        int n= word2.length();
        int dp[m+1][n+1];
        for(int i=0;i<=m;i++)
         for(int j=0;j<=n;j++)
         {
             if(i==0)
                 dp[i][j]=j;
             else if(j==0)
                 dp[i][j]=i;
             else if(word1[i-1]==word2[j-1])
                    dp[i][j]=dp[i-1][j-1];
             else
                 dp[i][j]=1+min(dp[i][j-1],min(dp[i-1][j],dp[i-1][j-1]));
         }
        return dp[m][n];
    }
   
TC:O(mXn)
SC:O(mXn)




